i
i = i + 1
i
fac[i]
fac[i] = i*fac[i-1]
fac
find_n <- function(epsilon) {
fac = c(1)
i = 1
while(1/fac[i] > 2*epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
print(fac[i])
}
return(i)
}
find_n(.01)
exp(1)
exp(1) - 2.7182
find_n <- function(epsilon) {
fac = c(1)
i = 1
e_approx = 1
while(exp(1) - e_approx  > epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
e_approx = e_approx + fac[i]
print(e_approx)
}
return(i)
}
find_n(.01)
find_n <- function(epsilon) {
fac = c(1)
i = 1
e_approx = 1
while(exp(1) - e_approx  > epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
e_approx = e_approx + fac[i]
print(fac[i])
print(e_approx)
}
return(i)
}
find_n(.01)
find_n <- function(epsilon) {
fac = c(1)
i = 1
e_approx = 1
while(exp(1) - e_approx  > epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
e_approx = e_approx + 1/fac[i]
print(fac[i])
print(e_approx)
}
return(i)
}
find_n(.01)
find_n <- function(epsilon) {
fac = c(1)
i = 1
e_approx = 1
while(abs(exp(1) - e_approx)  > epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
e_approx = e_approx + 1/fac[i]
print(fac[i])
print(e_approx)
}
return(i)
}
find_n(.01)
find_n <- function(epsilon) {
fac = c(1)
i = 1
e_approx = 2
while(abs(exp(1) - e_approx)  > epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
e_approx = e_approx + 1/fac[i]
print(fac[i])
print(e_approx)
}
return(i)
}
find_n(.01)
find_n <- function(epsilon) {
fac = c(1)
i = 1
e_approx = 2
while(abs(exp(1) - e_approx)  > epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
e_approx = e_approx + 1/fac[i]
}
return(i)
}
find_n(.01)
find_n <- function(epsilon) {
fac = c(1)
i = 1
e_approx = 2
while(abs(exp(1) - e_approx)  > epsilon) {
i = i + 1
fac[i] = i*fac[i-1]
e_approx = e_approx + 1/fac[i]
}
print(e_approx)
return(i)
}
find_n(.01)
range(100,1,-1)
arange(100)
pow(10,2)
10^2
1/2
1//2
as.int(1/2)
as.integer(1/2)
num_digits <- function(x) {
i = 1
while(as.integer(x/10^i) > 0)
{
i += 1
}
return(i)
}
num_digits <- function(x) {
i = 1
while(as.integer(x/10^i) > 0)
{
i = i + 1
}
return(i)
}
num_digits(1000)
num_digits(100)
num_digits(300)
num_digits(340)
990
as.integer(990/100)
as.integer(980/100)
981
as.integer(981/10)
as.integer(981/10)%%10
as.integer(981/100)*100
is_palindrome <- function(x) {
n = num_digits(x)
if(n == 1) {
return(T)
}
return((x %% 10 == as.integer(x/10^(n-1))) &
as.integer((x - as.integer(x/10^(n-1))*10^(n-1))/10))
)
is_palindrome <- function(x) {
n = num_digits(x)
if(n == 1) {
return(T)
}
return((x %% 10 == as.integer(x/10^(n-1))) &
as.integer((x - as.integer(x/10^(n-1))*10^(n-1))/10))
}
is_palindrome(989)
is_palindrome(987)
1:100
100:1
max_pal = 1
for(i in 999:1)
{
for(j in 999:1)
{
if(i*j > max_pal & is_palindrome(i*j))
max_pal = i*j
}
}
print(max_pal)
is_palindrome(994009)
is_palindrome(99409)
is_palindrome(9949)
num_digits(994009)
x = 994009
x %% 10
as.integer(x/10^(6-1))
is_palindrome <- function(x) {
n = num_digits(x)
if(n == 1) {
return(T)
}
return((x %% 10 == as.integer(x/10^(n-1))) &
is_palindrome(as.integer((x - as.integer(x/10^(n-1))*10^(n-1))/10)))
}
is_palindrome(99409)
max_pal = 1
for(i in 999:1)
{
for(j in 999:1)
{
if(i*j > max_pal & is_palindrome(i*j))
max_pal = i*j
}
}
print(max_pal)
is_palindrome(max_pal)
x = 900099
x %% 10
num_digits(x)
as.integer(x/10^(6-1))
i_digit <- function(i, x) {
as.integer(x/10^(i-1))
}
i_digit(990022123, 3)
'asdf'
nchar('asdf')
981/10
981%%10
981%%100
81 - 80
81 - 1
81/10
9876
9876%100
9876%%100
i_digit(x) <- function(x) {
x = x %% 10^i
n = num_digits(x)
return(as.integer(x/10^(num_digits(x)-1)))
}
i_digit <- function(x, i) {
x = x %% 10^i
n = num_digits(x)
return(as.integer(x/10^(num_digits(x)-1)))
}
i_digit(9876, 2)
i_digit(9876, 3)
i_digit(9876, 4)
is_palindrome <- function(x) {
n = num_digits(x)
if(n == 1) {
return(T)
}
for(i in 1:as.integer(n/2)) {
if(i_digit(x, i) != i_digit(x, n - i))
return(F)
}
return(T)
}
is_palindrome(9876)
is_palindrome(9877)
is_palindrome(9879)
is_palindrome(9889)
i_digit(9889, 1)
i_digit(9889, 2)
i_digit(9889, 3)
i_digit(9889, 4)
num_digits(9889)
is_palindrome <- function(x) {
n = num_digits(x)
for(i in 1:as.integer(n/2)) {
if(i_digit(x, i) != i_digit(x, n - i + 1))
return(F)
}
return(T)
}
is_palindrome(9889)
is_palindrome(9869)
is_palindrome(9669)
is_palindrome(96569)
PrimeFactor <- function(n, primefactors)
{
if(is.prime(n))
{
return(n)
}
i = 2
while(T)
{
if(n %% i == 0)
{
return(PrimeFactor(n/i, c(primefactor, i)))
}
i = i + 1
}
}
is_palindrome(96569)
PrimeLessN <- function(n) {
num = c(F, rep(T, n-1))
for(i in 2:sqrt(n))
{
j = 2
while(i * j <= n)
{
num[i * j] = F
j = j+1
}
}
return(which(num == T))
}
isPrime <- function(n) {
num = rep(T, n)
for(i in 2:sqrt(n))
{
j = 2
while(i * j <= n)
{
num[i * j] = F
j = j+1
}
}
return(num[n])
}
is.prime <- function(num) {
if (num == 2) {
return(TRUE)
} else if (num %% 2:(num-1) == 0) {
return(FALSE)
} else {
return(TRUE)
}
}
NUM = 600851475143
primefactors = c()
PrimeFactor <- function(n, primefactors)
{
if(is.prime(n))
{
return(n)
}
i = 2
while(T)
{
if(n %% i == 0)
{
return(PrimeFactor(n/i, c(primefactor, i)))
}
i = i + 1
}
}
PrimeFactor(100)
sqrt(600851475143)
rep(T, 775146)
c(66000006666066)
load("~/NYCDSA/Bootcamp/xgboost_jun4_8pm.RData")
importance_matrix = xgb.importance(feature_names = colnames(higgs.train.dummy), model = bst)
library(xgboost)
library(methods)
library(pROC)
library(caret)
library(xgboost)
library(readr)
library(plyr)
library(dplyr)
library(tidyr)
library(dummies)
library(doMC)
registerDoMC(cores = 4)
importance_matrix = xgb.importance(feature_names = colnames(higgs.train.dummy), model = bst)
#Predicting training data
xgmat.train <- xgb.DMatrix(as.matrix(higgs.train.dummy),
label = as.numeric(higgs.labels == "X0"),
weight = scaled.weight)
xgboostTrainPred <- predict(bst, newdata = xgmat.train)
labels <- ifelse(as.character(higgs.labels)=="X1", 1, 0)
auc = roc(labels, xgboostTrainPred)
plot(auc, print.thres=TRUE)
######## From the graph, we can tell the best threshold is 0.002
threshold <- 0.662
err <- mean(as.numeric(xgboostTrainPred >= threshold) != (higgs.labels == "X0"))
#########################
#Predicting the test data
xgmat.test <- xgb.DMatrix(as.matrix(higgs.test.dummy))
xgboostTestPred <- predict(bst, newdata=xgmat.test)
predicted <- rep("s",550000)
predicted[xgboostTestPred>=threshold] <- "b"
weightRank = rank(xgboostTestPred, ties.method= "random")
save.image("~/NYCDSA/Bootcamp/xgboost_jun4_8pm.RData")
ggplot(importance_matrix, aes(x = Feature, y = Gain)) + geom_bar()
ggplot(importance_matrix) + geom_bar(aes(x = Feature, y = Gain))
help(stat_count())
library(ggplot2)
ggplot(importance_matrix, aes(x = Feature, y = Gain)) + geom_bar()
help(stat_count)
ggplot(importance_matrix, aes(x = Feature, y = Gain)) + geom_bar(stat = "identity")
ggplot(importance_matrix, aes(x = Feature, y = Gain)) + geom_bar(stat = "identity") + coord_flip()
ggplot(importance_matrix, aes(reorder(x = Feature, Gain), y = Gain)) + geom_bar(stat = "identity") + coord_flip()
ggplot(importance_matrix, aes(reorder(x = Feature, Gain), y = Gain)) + geom_bar(stat = "identity") + coord_flip() + scale_fill_brewer()
ggplot(importance_matrix, aes(reorder(x = Feature, Gain), y = Gain)) + geom_bar(aes(fill = 1), stat = "identity") + coord_flip()
ggplot(importance_matrix, aes(reorder(x = Feature, Gain), y = Gain)) +
geom_bar(aes(fill = 1), stat = "identity") + coord_flip() +
xlab("Variable importance") + ylab("Features") + ggtitle("Variable importance for xgboost") +
guide(fill = F)
ggplot(importance_matrix, aes(reorder(x = Feature, Gain), y = Gain)) +
geom_bar(aes(fill = 1), stat = "identity") + coord_flip() +
xlab("Variable importance") + ylab("Features") + ggtitle("Variable importance for xgboost") +
guides(fill = F)
ggplot(importance_matrix, aes(reorder(x = Feature, Gain), y = Gain)) +
geom_bar(aes(fill = 1), stat = "identity") + coord_flip() +
ylab("Variable importance") + xlab("Features") + ggtitle("Variable importance for xgboost") +
guides(fill = F)
rm(list = ls())
seq(10)
seq(2, 1)
2:1
1:1
seq(1, 10
)
seq(1, 1)
q()
shiny::runApp('CapstoneProject/unicorns/ShinyMap/AirbnbBookings')
shiny::runApp('CapstoneProject/unicorns/ShinyMap/AirbnbBookings', host = '0.0.0.0', port=3168)
shiny::runApp()
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
countries = read.csv("../../countries.csv", stringsAsFactors = F)
t = data.frame(abr = c("AU", "CA", "DE", "ES", "FR", "GB", "IT", "NL", "PT", "US"),
country.name = c("Australia", "Canada", "Germany", "Spain", "France", "United Kingdom", "Italy", "Netherlands", "Portugal", "United States"),
destination = 1)
merged = merge(countries, t, by.x = "country_destination", by.y = "abr", all.x = T)
all_countries = merge(df['COUNTRY'], merged, by.x = 'COUNTRY', by.y = 'country.name', all.x = T)
all_countries$hover <- with(all_countries, paste(COUNTRY, '<br>',
"Latitude: ", lat_destination,
'<br>', "Longitude: ", lng_destination,
'<br>', "Distance from US (km): ", distance_km,
'<br>', "Size of country (km2): ", destination_km2,
'<br>', "Language: ", destination_language,
'<br>', "Levenshtein distance of language: ", language_levenshtein_distance))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Robinson')
)
setwd("~/NYCDSA/Bootcamp/CapstoneProject/unicorns/ShinyMap/AirbnbBookings")
library(shiny)
library(dplyr)
library(ggplot2)
library(countrycode)
library(googleVis)
library(shinydashboard)
library(shinythemes)
library(plotly)
library(RColorBrewer)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
countries = read.csv("../../countries.csv", stringsAsFactors = F)
t = data.frame(abr = c("AU", "CA", "DE", "ES", "FR", "GB", "IT", "NL", "PT", "US"),
country.name = c("Australia", "Canada", "Germany", "Spain", "France", "United Kingdom", "Italy", "Netherlands", "Portugal", "United States"),
destination = 1)
merged = merge(countries, t, by.x = "country_destination", by.y = "abr", all.x = T)
all_countries = merge(df['COUNTRY'], merged, by.x = 'COUNTRY', by.y = 'country.name', all.x = T)
all_countries$hover <- with(all_countries, paste(COUNTRY, '<br>',
"Latitude: ", lat_destination,
'<br>', "Longitude: ", lng_destination,
'<br>', "Distance from US (km): ", distance_km,
'<br>', "Size of country (km2): ", destination_km2,
'<br>', "Language: ", destination_language,
'<br>', "Levenshtein distance of language: ", language_levenshtein_distance))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Robinson')
)
output$plot <- renderPlotly({
plot_ly(all_countries, z = destination,
text = hover,
locations = COUNTRY,
type = 'choropleth',
marker = list(line = l),
showscale = F,
#colorbar = list(title = "Percent more <br>likely to book"),
colors = 'Blues', locationmode = "country names") %>%
layout(geo = g,
title = 'Destinations')
})
############################################
df = read.csv('../../train_starting.csv')
df$age = factor(df$age, levels = c("0-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74", "75-79", "80-84", "85-89", "90-94", "95-99", "100+"))
browser = df %>% group_by(first_browser) %>% summarise(pct = n()/nrow(df))
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
countries = read.csv("../../countries.csv", stringsAsFactors = F)
t = data.frame(abr = c("AU", "CA", "DE", "ES", "FR", "GB", "IT", "NL", "PT", "US"),
country.name = c("Australia", "Canada", "Germany", "Spain", "France", "United Kingdom", "Italy", "Netherlands", "Portugal", "United States"),
destination = 1)
merged = merge(countries, t, by.x = "country_destination", by.y = "abr", all.x = T)
all_countries = merge(df['COUNTRY'], merged, by.x = 'COUNTRY', by.y = 'country.name', all.x = T)
all_countries$hover <- with(all_countries, paste(COUNTRY, '<br>',
"Latitude: ", lat_destination,
'<br>', "Longitude: ", lng_destination,
'<br>', "Distance from US (km): ", distance_km,
'<br>', "Size of country (km2): ", destination_km2,
'<br>', "Language: ", destination_language,
'<br>', "Levenshtein distance of language: ", language_levenshtein_distance))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Robinson')
)
save.image("~/NYCDSA/Bootcamp/CapstoneProject/unicorns/ShinyMap/Airbnb/LoadedData.RData")
df = read.csv('../../train_starting.csv')
df$age = factor(df$age, levels = c("0-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74", "75-79", "80-84", "85-89", "90-94", "95-99", "100+"))
browser = df %>% group_by(first_browser) %>% summarise(pct = n()/nrow(df))
save.image("~/NYCDSA/Bootcamp/CapstoneProject/unicorns/ShinyMap/AirbnbBooking/LoadedData.RData")
load('LoadedData.RData')
setwd("~/NYCDSA/Bootcamp/CapstoneProject/unicorns/ShinyMap/AirbnbBooking")
load('LoadedData.RData')
