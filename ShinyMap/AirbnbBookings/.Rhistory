var.test(SAT.Fall, SAT.Spring, alternative = "two.sided") #Conducting the F-test to
help(set.seed)
set.seed(0)
Low.Calorie = rnorm(200, 10, 1) #Randomly generating weight loss measurements
Low.Carb = rnorm(200, 8.5, 1)   #for various diet types.
Low.Fat = rnorm(200, 8, 1)
Control = rnorm(200, 0, 1)
Weight.Loss = c(Low.Calorie, Low.Carb, Low.Fat, Control) #Combining data into
Category = c(rep("Low Calorie", 200),                    #different consolidated
rep("Low Carb", 200),                       #vectors.
rep("Low Fat", 200),
rep("Control", 200))
boxplot(Weight.Loss ~ Category,
col = c("red", "orange", "yellow", "green"),
main = "Distribution of Weight Loss\nfor Various Diets")
help(rnorm)
summary(aov(Weight.Loss ~ Category)) #Conducting the One-Way ANOVA on the weight
aov(Weight.Loss ~ Category) #Conducting the One-Way ANOVA on the weight
summary(aov(Weight.Loss ~ Category)) #Conducting the One-Way ANOVA on the weight
quiz.data = matrix(c(44, 21, 12, 18), nrow = 2, ncol = 2, byrow = TRUE)
dimnames(quiz.data) = list(Attendance = c("Present", "Absent"),
Grade = c("Pass", "Fail"))
quiz.data
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
#####Chick Weight Data Set Examples#####
########################################
library(datasets) #Load the base R datasets library.
help(chickwts) #See the help documentation for the chickwts dataset to see a
#description of the included variables.
chickwts #Visually inspect the data.
summary(chickwts) #Returns the five-number summary, along with the mean,
#for any continuous variables; returns the count information
#for any categorical variables.
sd(chickwts$weight) #Returns the standard deviation of the weight variable.
var(chickwts$weight) #Returns the variance of the weight variable.
table(chickwts) #Returns a contingency table of weight and feed.
#We are told that the true average weight of chicks should be around 280 grams;
#however, we do not believe this is the case. We want to test the notion that the
#weight of chicks should be centered at a value lower than 280 grams. The average
#chick weight of our dataset is 261.3 grams. Is this significantly different for
#us to change our belief? To decide, we use a One-Sample T-Test:
plot(density(chickwts$weight), main = "Overall Distribution of Chick Weights")
abline(v = mean(chickwts$weight), lwd = 2, lty = 2)
abline(v = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(chickwts$weight, main = "Overall Distribution of Chick Weights")
abline(h = mean(chickwts$weight), lwd = 2, lty = 2)
abline(h = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
t.test(chickwts$weight, mu = 280, alternative = "less")
boxplot(chickwts$weight ~ chickwts$feed,
col = c("red", "orange", "yellow", "green", "blue", "violet"),
main = "Distribution of Chick Weights\nfor Various Feed Types")
var.test(chickwts$weight[chickwts$feed == "casein"],
chickwts$weight[chickwts$feed == "meatmeal"],
alternative = "two.sided")
q()
install.packages("lars")
library("lars")
load(boston)
help(boston)
library("lars")
train = read.csv("Week09_03.Data.R_coding_review/Train50_winedata.csv")
train = read.csv("Week09_03.Data.R_coding_review/Training50_winedata.csv")
View(train)
test = read.csv("Week09_03.Data.R_coding_review/Test50_winedata.csv")
View(test)
train.quality = train["quality"]
names(train)
train = train[-13]
test = read.csv("Week09_03.Data.R_coding_review/Test50_winedata.csv")
test.quality = test["quality"]
test = test[-13]
normfact <- function (x) {
# fill in code
return(list(mean = mean(x), sd =std(x)))
}
help(is.vector)
help(lars)
normfact <- function (x) {
# fill in code
return(sqrt(sum((x*x))))
}
normfact(c(5, 4, 3, 2))
return(sqrt(mean((x*x))))
normfact <- function (x) {
# fill in code
return(sqrt(mean((x*x))))
}
return(sqrt(mean((x*x))))
normfact(c(5, 4, 3, 2))
normfact(c(3, 3, 3, 3))
normalize <- function (x, nf) {
# fill in code
return(x/nf)
}
train<-read.csv("Test50_winedata.csv",header=T,sep=",")[-1]
test<-read.csv("Training50_winedata.csv",header=T,sep=",")[-1]
trnx<-train[,c(1:11,13)]
trny<-train[,12]
tstx<-test[,c(1:11,13)]
tsty<-test[,12]
rm(test.quality)
rm(train.quality)
nfact=apply(trnx,2,normfact)
trnx=normalize(trnx,nfact)
View(tstx)
summary(trnx)
tstx=normalize(tstx, nfact)
mux=apply(trnx,2,mean)
muy=mean(trny)
trnx=centering(trnx,mux)
centering <- function (x, mu) {
if (is.vector(x)) {
x = x - mean(x) + mu
}
else {
# fill in code
}
return(x)
}
mux=apply(trnx,2,mean)
muy=mean(trny)
trnx=centering(trnx,mux)
trny=centering(trny,muy)
tstx=centering(tstx, mux)
tsty=centering(tstx, muy)
centering <- function (x, mu) {
if (is.vector(x)) {
x = x - mu
}
else {
# fill in code
}
return(x)
}
mux=apply(trnx,2,mean)
muy=mean(trny)
trnx=centering(trnx,mux)
trny=centering(trny,muy)
# centering test data
tstx=centering(tstx, mux)
tsty=centering(tstx, muy)
summary(trnx)
mux
trnx=centering(trnx,mux)
apply(trnx, 2, mean)
centering(c(1, 2, 3))
centering(c(1, 2, 3), 2)
trnx
centering(trnx, c(1, 2, 3))
is.vector(trnx)
sapply(trnx, function(x) x- 2)
sapply(trnx, function(x) x - c(2, 2))
warnings()
help(apply)
apply(trnx, 1, function(x) x - cux)
apply(trnx, 1, function(x) x - mux)
summary(apply(trnx, 1, function(x) x - mux))
apply(trnx, 1, function(x) x - mux)
apply(trnx, 2, function(x) x - mux)
summary(apply(trnx, 2, function(x) x - mux))
mux
trnx[1:2,]
apply(trnx[1:2,], 2, function(x) x - mux)
apply(trnx[1:2,], 2, function(x) x - mux)
trnx[1:2,]
apply(trnx[1:2,], 1, function(x) x - mux)
help(transpose)
t(apply(trnx[1:2,], 1, function(x) x - mux))
trnx[1:2,]
mux
centering <- function (x, mu) {
if (is.vector(x)) {
x = x - mu
}
else {
x = t(apply(x, 1, function(t) t - mux))
}
return(x)
}
centering(c(1, 2, 3), 2)
centering(trnx)
summary(centering(trnx))
test<-read.csv("Test50_winedata.csv",header=T,sep=",")[-1]
train<-read.csv("Training50_winedata.csv",header=T,sep=",")[-1]
trnx<-train[,c(1:11,13)]
test<-read.csv("Week09_03.Data.R_coding_review/Test50_winedata.csv",header=T,sep=",")[-1]
train<-read.csv("Week09_03.Data.R_coding_review/Training50_winedata.csv",header=T,sep=",")[-1]
trnx<-train[,c(1:11,13)]
trny<-train[,12]
tstx<-test[,c(1:11,13)]
tsty<-test[,12]
#normalization
nfact=apply(trnx,2,normfact)
trnx=normalize(trnx,nfact)
# normalize test data
tstx=normalize(tstx, nfact)
normfact <- function (x) {
nfact = 1/sd(x)
return(nfact)
}
normfact(c(1, 2, 3, 4))
normfact <- function (x) {
return(1/sd(x))
}
normalize <- function (x, nf) {
return(x/nf)
}
centering <- function (x, mu) {
if (is.vector(x)) {
x = x - mu
}
else {
x = t(apply(x, 1, function(t) t - mux))
}
return(x)
}
test<-read.csv("Week09_03.Data.R_coding_review/Test50_winedata.csv",header=T,sep=",")[-1]
train<-read.csv("Week09_03.Data.R_coding_review/Training50_winedata.csv",header=T,sep=",")[-1]
trnx<-train[,c(1:11,13)]
trny<-train[,12]
tstx<-test[,c(1:11,13)]
tsty<-test[,12]
#normalization
nfact=apply(trnx,2,normfact)
trnx=normalize(trnx,nfact)
# normalize test data
tstx=normalize(tstx, nfact)
#centering
mux=apply(trnx,2,mean)
muy=mean(trny)
trnx=centering(trnx,mux)
trny=centering(trny,muy)
# centering test data
tstx=centering(tstx, mux)
tsty=centering(tstx, muy)
summary(tstx)
test<-read.csv("Week09_03.Data.R_coding_review/Test50_winedata.csv",header=T,sep=",")[-1]
train<-read.csv("Week09_03.Data.R_coding_review/Training50_winedata.csv",header=T,sep=",")[-1]
trnx<-train[,c(1:11,13)]
trny<-train[,12]
tstx<-test[,c(1:11,13)]
tsty<-test[,12]
#normalization
nfact=apply(trnx,2,normfact)
nfact
summary(trnx)
normalize <- function (x, nf) {
return(x*nf)
}
test<-read.csv("Week09_03.Data.R_coding_review/Test50_winedata.csv",header=T,sep=",")[-1]
train<-read.csv("Week09_03.Data.R_coding_review/Training50_winedata.csv",header=T,sep=",")[-1]
trnx<-train[,c(1:11,13)]
trny<-train[,12]
tstx<-test[,c(1:11,13)]
tsty<-test[,12]
#normalization
nfact=apply(trnx,2,normfact)
trnx=normalize(trnx,nfact)
# normalize test data
tstx=normalize(tstx, nfact)
#centering
mux=apply(trnx,2,mean)
muy=mean(trny)
trnx=centering(trnx,mux)
trny=centering(trny,muy)
# centering test data
tstx=centering(tstx, mux)
tsty=centering(tstx, muy)
summary(trnx)
apply(trnx, 2, sd)
centering <- function (x, mu) {
if (is.vector(x)) {
x = x - mu
}
else {
x = t(apply(x, 1, function(t) t - mu))
}
return(x)
}
test<-read.csv("Week09_03.Data.R_coding_review/Test50_winedata.csv",header=T,sep=",")[-1]
train<-read.csv("Week09_03.Data.R_coding_review/Training50_winedata.csv",header=T,sep=",")[-1]
trnx<-train[,c(1:11,13)]
trny<-train[,12]
tstx<-test[,c(1:11,13)]
tsty<-test[,12]
#normalization
nfact=apply(trnx,2,normfact)
trnx=normalize(trnx,nfact)
# normalize test data
tstx=normalize(tstx, nfact)
#centering
mux=apply(trnx,2,mean)
muy=mean(trny)
trnx=centering(trnx,mux)
trny=centering(trny,muy)
# centering test data
tstx=centering(tstx, mux)
tsty=centering(tstx, muy)
trnx
summary(trnx)
apply(trnx, 1, sd)
apply(trnx, 2, sd)
nfact
trnx[1:2, ]
centering(trnx[1:2, ], mux)
test<-read.csv("Week09_03.Data.R_coding_review/Test50_winedata.csv",header=T,sep=",")[-1]
train<-read.csv("Week09_03.Data.R_coding_review/Training50_winedata.csv",header=T,sep=",")[-1]
trnx<-train[,c(1:11,13)]
trny<-train[,12]
tstx<-test[,c(1:11,13)]
tsty<-test[,12]
#normalization
nfact=apply(trnx,2,normfact)
normalize(trnx, nfact)
help(solve)
help(inverse)
normalize(c(1, 2, 3), 2)
normfact(c(1, 2, 3))
nfact=apply(trnx,2,normfact)
nfact
apply(trnx, 2, sd)
normalize <- function (x, nf) {
return(t(apply(x, 1, function(t) t*nf)))
}
normalize(trnx, nfact)
summary(normalize(trnx, nfact))
apply(normalize(trnx, nfact), 1, sd)
apply(normalize(trnx, nfact), 2, sd)
test<-read.csv("Week09_03.Data.R_coding_review/Test50_winedata.csv",header=T,sep=",")[-1]
train<-read.csv("Week09_03.Data.R_coding_review/Training50_winedata.csv",header=T,sep=",")[-1]
trnx<-train[,c(1:11,13)]
trny<-train[,12]
tstx<-test[,c(1:11,13)]
tsty<-test[,12]
#normalization
nfact=apply(trnx,2,normfact)
trnx=normalize(trnx,nfact)
# normalize test data
tstx=normalize(tstx, nfact)
#centering
mux=apply(trnx,2,mean)
muy=mean(trny)
trnx=centering(trnx,mux)
trny=centering(trny,muy)
# centering test data
tstx=centering(tstx, mux)
tsty=centering(tstx, muy)
summary(trnx)
apply(trnx, 2, sd)
mse <- function(py,ty) {
return(mean((py-ty)^2))
}
predict.linear <- function (w,X) {
n<-dim(X)[1]
y<-c(array(0,dim=c(n,1)))
for (i in 1:n) {
y[i]=sum(w*X[i,])
}
return(y)
}
mse.linear <- function(w,X,y) {
py=predict.linear(w,X)
return (mse(py,y))
}
features.from.path <- function(path, s) {
k=0;
bestj=1
besti=path[1]
mys=1;
kk=rep(0,s);
for (j in 1:length(path)) {
if (path[j]>0) {
k=k+1;
kk[k]=path[j];
}
else {
ik=which(kk[1:k]==-path[j]);
kk[ik[1]]=kk[k];
k=k-1;
}
if ((mys<k) & (k<=s)) {
mys=k
}
if (k==mys) {
besti=kk[1:k];
bestj=j;
}
}
return (besti);
}
source('~/.active-rstudio-document')
l <- list(color = toRGB("grey"), width = 0.5)
help(toRGB)
library(plotly)
l <- list(color = toRGB("grey"), width = 0.5)
View(df)
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
help(plot_ly)
plot_ly(df, z = GDP..BILLIONS., text = COUNTRY, locations = CODE, type = 'choropleth',
color = GDP..BILLIONS., colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
View(df)
source('~/.active-rstudio-document')
countries = read.csv("../../../data/countries.csv", stringsAsFactors = F)
setwd("~/NYCDSA/Bootcamp/CapstoneProject/unicorns/ShinyMap/AirbnbBookings")
countries = read.csv("../../../data/countries.csv", stringsAsFactors = F)
t = data.frame(abr = c("AU", "CA", "DE", "ES", "FR", "GB", "IT", "NL", "PT", "US"), country.name = c("Australia", "Canada", "Germany", "Spain", "France", "United Kingdom", "Italy", "Netherlands", "Portugal", "United States"))
merged = merge(countries, t, by.x = "country_destination", by.y = "abr", all.x = T)
merged
help(plot_ly)
names(plot_ly)
names(merged)
plot_ly(countries, z = language_levenshtein_distance, text = country.name, locations = country.name, type = 'choropleth',
color = language_levenshtein_distance, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
names(df)
plot_ly(countries, z = language_levenshtein_distance, text = country.name, locations = country.name, type = 'choropleth',
color = language_levenshtein_distance, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
plot_ly(countries, z = language_levenshtein_distance, text = 'country.name', locations = country.name, type = 'choropleth',
color = language_levenshtein_distance, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
plot_ly(countries, z = language_levenshtein_distance, text = 'country.name', locations = country.name, type = 'choropleth',
color = language_levenshtein_distance, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
plot_ly(df, z = GDP..BILLIONS., text = COUNTRY, locations = CODE, type = 'choropleth',
color = GDP..BILLIONS., colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
plot_ly(countries, z = language_levenshtein_distance, text = 'country.name', locations = 'country.name', type = 'choropleth',
color = language_levenshtein_distance, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
plot_ly(df, z = GDP..BILLIONS., text = COUNTRY, locations = CODE, type = 'choropleth',
color = GDP..BILLIONS., colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
plot_ly(df, z = GDP..BILLIONS., text = COUNTRY, locations = CODE, type = 'choropleth',
color = GDP..BILLIONS., colors = 'Blues', marker = list(line = l),
#colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(#title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
)
plot_ly(df, z = GDP..BILLIONS., text = COUNTRY, locations = CODE, type = 'choropleth',
color = GDP..BILLIONS., colors = 'Blues', marker = list(line = l),
#colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(#title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g))
plot_ly(df, z = GDP..BILLIONS., text = COUNTRY, locations = CODE, type = 'choropleth',
color = GDP..BILLIONS., colors = 'Blues', marker = list(line = l))
plot_ly(df, z = GDP..BILLIONS., text = COUNTRY, locations = CODE, type = 'choropleth',
color = GDP..BILLIONS., colors = 'Blues', marker = list(line = l)) %>% layout(geo = g)
df$CODE
help(plot_ly)
df$COUNTY
df$COUNTRY
df$CODE
help(plot_ly)
plot_ly(countries, z = language_levenshtein_distance, locations = country.name, type = 'choropleth',
color = language_levenshtein_distance, colors = 'Blues', marker = list(line = l),
colorbar = list(tickprefix = '$', title = 'GDP Billions US$')) %>%
layout(title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g)
plot_ly(df, z = language_levenshtein_distance, text = country.name, locations = country.name, type = 'choropleth',
color = GDP..BILLIONS., colors = 'Blues', marker = list(line = l)) %>% layout(geo = g)
plot_ly(countries, z = language_levenshtein_distance, text = country.name, locations = country.name, type = 'choropleth',
color = GDP..BILLIONS., colors = 'Blues', marker = list(line = l)) %>% layout(geo = g)
countries$country.name
plot_ly(merged, z = language_levenshtein_distance, text = country.name, locations = country.name, type = 'choropleth',
color = GDP..BILLIONS., colors = 'Blues', marker = list(line = l)) %>% layout(geo = g)
plot_ly(merged, z = language_levenshtein_distance, text = country.name, locations = country.name, type = 'choropleth',
colors = 'Blues', marker = list(line = l)) %>% layout(geo = g)
plot_ly(df, z = GDP..BILLIONS., text = COUNTRY, locations = CODE, type = 'choropleth',
color = GDP..BILLIONS., colors = 'Blues', marker = list(line = l)) %>% layout(geo = g)
plot_ly(df, z = GDP..BILLIONS., text = COUNTRY, locations = CODE, type = 'choropleth',
color = GDP..BILLIONS., colors = 'Blues', marker = list(line = l)) %>% layout(geo = g)
plot_ly(df, z = GDP..BILLIONS., text = COUNTRY, locations = CODE, type = 'choropleth', locationmode = "country names",
color = GDP..BILLIONS., colors = 'Blues', marker = list(line = l)) %>% layout(geo = g)
plot_ly(df, z = GDP..BILLIONS., text = COUNTRY, locations = COUNTRY, type = 'choropleth', locationmode = "country names",
color = GDP..BILLIONS., colors = 'Blues', marker = list(line = l)) %>% layout(geo = g)
names(merged)
plot_ly(merged, z = language_levenshtein_distance, text = country.name, locations = country.name,
type = 'choropleth', color = country.name, colors = 'Blues',
marker = list(line = l)) %>% layout(geo = g)
plot_ly(merged, z = language_levenshtein_distance, text = country.name, locations = country.name,
type = 'choropleth', colors = 'Blues',
marker = list(line = l)) %>% layout(geo = g)
plot_ly(merged, z = language_levenshtein_distance, text = country.name, locations = country.name,
type = 'choropleth', color = country.name, colors = 'Blues', locationmode = "country names",
marker = list(line = l)) %>% layout(geo = g)
merged
